#!/usr/bin/env python3
import os

import rospy
from sensor_msgs.msg import JointState
from std_msgs.msg import Float64MultiArray


class JointStatesToFloat:
    def __init__(self, namespace):
        self._rate = rospy.Rate(10)
        self._msg_received = False
        self._joint_state_msg = JointState()
        rospy.Subscriber("fake_joint_states", JointState, self._joint_states_cb)
        rospy.loginfo("[JointStatesToFloat::init] Waiting for first joint state message to be published.")
        self._wait_for_first_msg()
        rospy.loginfo("[JointStatesToFloat::init] Joint state message received, proceeding.")
        self._previous_positions = [0] * len(self._joint_state_msg.position)
        self._pub = rospy.Publisher(os.path.join(namespace, 'position_controller/command'), Float64MultiArray,
                                    queue_size=1)

    def _wait_for_first_msg(self):
        while not self._msg_received:
            self._rate.sleep()

    def _joint_states_cb(self, msg):
        self._joint_state_msg = msg
        self._msg_received = True

    def _publish_command(self):
        positions = [joint for joint in self._joint_state_msg.position]
        # compare with previous positions to see if there was any change
        if any([previous != new for previous, new in zip(self._previous_positions, positions)]):
            msg = Float64MultiArray()
            msg.data = positions
            self._pub.publish(msg)
        # to keep track if the positions changed or not
        self.previous_angles = positions

    def start(self):
        while not rospy.is_shutdown():
            if self._msg_received:
                # lower flag
                self._msg_received = False
                self._publish_command()
            self._rate.sleep()


if __name__ == '__main__':
    rospy.init_node('joint_states_to_float', anonymous=False)
    jstf = JointStatesToFloat(rospy.get_namespace())
    jstf.start()
